openapi: 3.0.0
info:
  title: HackUTD API
  description: API documentation for HackPortal
  version: 1.0.0
servers:
  - url: /api
    description: API base URL

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        user:
          type: object
          properties:
            permissions:
              type: array
              items:
                type: string
            group:
              type: string
        status:
          type: string
          enum: [Accepted, Rejected, In Review]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Application:
      type: object
      properties:
        id:
          type: string
        user:
          type: object
          properties:
            id:
              type: string
            firstName:
              type: string
            lastName:
              type: string
            permissions:
              type: array
              items:
                type: string
        resume:
          type: string
        status:
          type: string
          enum: [Accepted, Rejected, In Review]

    Challenge:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        order:
          type: number
        sponsor:
          type: string

    KeynoteSpeaker:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        title:
          type: string
        description:
          type: string
        image:
          type: string

    Sponsor:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        tier:
          type: string
        logo:
          type: string
        website:
          type: string
        description:
          type: string

    SpotlightEvent:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        time:
          type: string
        location:
          type: string

    Token:
      type: object
      properties:
        token:
          type: string
        expiresAt:
          type: string
          format: date-time

    Stats:
      type: object
      properties:
        superAdminCount:
          type: number
        checkedInCount:
          type: number
        hackerCount:
          type: number
        adminCount:
          type: number
        scans:
          type: object
          additionalProperties:
            type: number
        timestamp:
          type: object
          additionalProperties:
            type: number

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string

    RegistrationStatus:
      type: object
      properties:
        allowRegistrations:
          type: boolean
        applicationDecisions:
          type: boolean

    Schedule:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        location:
          type: string
        type:
          type: string
          enum: [workshop, event, meal]

    Score:
      type: object
      properties:
        id:
          type: string
        hackerId:
          type: string
        score:
          type: number
          enum: [1, 2, 3, 4]
        isSuperVote:
          type: boolean
        reviewerId:
          type: string
        timestamp:
          type: string
          format: date-time

    Date:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        isActive:
          type: boolean

    Member:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        role:
          type: string
        image:
          type: string
        description:
          type: string
        order:
          type: number

    Question:
      type: object
      properties:
        id:
          type: string
        question:
          type: string
        answer:
          type: string
        category:
          type: string
        order:
          type: number

    FAQ:
      type: object
      properties:
        id:
          type: string
        question:
          type: string
        answer:
          type: string
        category:
          type: string
        order:
          type: number

    Announcement:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
        timestamp:
          type: string
          format: date-time
        isActive:
          type: boolean

    AcceptReject:
      type: object
      properties:
        id:
          type: string
        hackerId:
          type: string
        status:
          type: string
          enum: [accepted, rejected]
        timestamp:
          type: string
          format: date-time
        reviewerId:
          type: string

    CreidUser:
      type: object
      properties:
        id:
          type: string
        user:
          type: object
          properties:
            firstName:
              type: string
            lastName:
              type: string
            permissions:
              type: array
              items:
                type: string

    Email:
      type: object
      properties:
        userEmail:
          type: string
          format: email

    Prize:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        rank:
          type: number
        sponsor:
          type: string
        image:
          type: string

paths:
  /acceptreject:
    get:
      summary: Get all accept/reject decisions
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Decisions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AcceptReject'
    post:
      summary: Create a new accept/reject decision
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcceptReject'
      responses:
        '200':
          description: Decision created successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /announcements:
    get:
      summary: Get all announcements
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Announcements retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Announcement'
    post:
      summary: Create a new announcement
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Announcement'
      responses:
        '200':
          description: Announcement created successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /applications:
    get:
      summary: Get all applications
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Applications retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new application
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
      responses:
        '200':
          description: Application created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                  registrationData:
                    $ref: '#/components/schemas/Application'
        '400':
          description: Invalid request or profile already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Registration not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an existing application
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
      responses:
        '200':
          description: Application updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                  updatedData:
                    $ref: '#/components/schemas/Application'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Registration updates not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete an application
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Application deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string

  /applications/assign-reviewers:
    post:
      summary: Assign reviewers to applications
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reviewerIds:
                  type: array
                  items:
                    type: string
                applicationIds:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Reviewers assigned successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /applications/reviews:
    get:
      summary: Get applications in the common review pool
      description: Returns applications in the common pool that require review (excluding those already reviewed by the current reviewer).
      security:
        - BearerAuth: []
      parameters:
        - name: token
          in: query
          required: false
          schema:
            type: string
          description: Bearer token for authentication (can also be sent in Authorization header)
      responses:
        '200':
          description: Applications retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                  message:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string

  /applications/reviews/{reviewerId}:
    get:
      summary: Get applications assigned to a specific reviewer
      description: Returns applications assigned to a specific reviewer, including any existing score/note for that reviewer.
      security:
        - BearerAuth: []
      parameters:
        - name: reviewerId
          in: path
          required: true
          schema:
            type: string
        - name: token
          in: query
          required: false
          schema:
            type: string
          description: Bearer token for authentication (can also be sent in Authorization header)
      responses:
        '200':
          description: Applications for reviewer retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                  message:
                    type: string
        '404':
          description: No applications found for the given reviewer
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string

  /applications/{applicationId}:
    get:
      summary: Get a specific application
      security:
        - BearerAuth: []
      parameters:
        - name: applicationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Application retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '404':
          description: Application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /challenges:
    get:
      summary: Get all challenges
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Challenges retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Challenge'
    post:
      summary: Create a new challenge
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Challenge'
      responses:
        '200':
          description: Challenge created successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /challenges/reorder:
    post:
      summary: Reorder challenges
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                challenges:
                  type: array
                  items:
                    $ref: '#/components/schemas/Challenge'
      responses:
        '200':
          description: Challenges reordered successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /creid:
    get:
      summary: Get all users and update miscellaneous collection
      description: This endpoint is only available in development environment
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Operation completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
        '404':
          description: Route not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string

  /dates:
    get:
      summary: Get all dates
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Dates retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Date'
    post:
      summary: Create a new date
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Date'
      responses:
        '200':
          description: Date created successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /email:
    post:
      summary: Add user to email list
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Email'
      responses:
        '200':
          description: Email added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
        '404':
          description: Route not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string

  /keynotespeakers:
    get:
      summary: Get all keynote speakers
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Keynote speakers retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KeynoteSpeaker'
    post:
      summary: Create a new keynote speaker
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeynoteSpeaker'
      responses:
        '200':
          description: Keynote speaker created successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /members:
    get:
      summary: Get all members
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Members retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Member'
    post:
      summary: Create a new member
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
      responses:
        '200':
          description: Member created successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /prizes:
    get:
      summary: Get all prizes
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Prizes retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Prize'
        '404':
          description: Route not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string

  /questions:
    get:
      summary: Get all questions
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Questions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
    post:
      summary: Create a new question
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        '200':
          description: Question created successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /questions/faq:
    get:
      summary: Get all FAQs
      security:
        - BearerAuth: []
      responses:
        '200':
          description: FAQs retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FAQ'
    post:
      summary: Create a new FAQ
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FAQ'
      responses:
        '200':
          description: FAQ created successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /questions/pending:
    get:
      summary: Get pending questions
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Pending questions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /registrations/status:
    get:
      summary: Get registration status
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Registration status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationStatus'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /registrations/toggle:
    post:
      summary: Toggle registration status
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                allowRegistrations:
                  type: boolean
      responses:
        '200':
          description: Registration status toggled successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /resume/move:
    post:
      summary: Move a resume
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fromUrl:
                  type: string
                toUrl:
                  type: string
      responses:
        '200':
          description: Resume moved successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /resume/upload:
    post:
      summary: Upload a resume
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Resume uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /scan:
    post:
      summary: Record a scan for a user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                scan:
                  type: string
      responses:
        '200':
          description: Scan recorded successfully
        '201':
          description: Duplicate scan
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    enum: [duplicate]
        '400':
          description: User not eligible for late check-in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: User has not checked in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /scantypes:
    get:
      summary: Get all scan types
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Scan types retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    isCheckIn:
                      type: boolean
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /schedule:
    get:
      summary: Get all schedule items
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Schedule items retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'
    post:
      summary: Create a new schedule item
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schedule'
      responses:
        '200':
          description: Schedule item created successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /scoring:
    get:
      summary: Get all scores
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Scores retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Score'
    post:
      summary: Create a new score
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Score'
      responses:
        '200':
          description: Score created successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /sponsors:
    get:
      summary: Get all sponsors
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Sponsors retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sponsor'
    post:
      summary: Create a new sponsor
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sponsor'
      responses:
        '200':
          description: Sponsor created successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /spotlightevents:
    get:
      summary: Get all spotlight events
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Spotlight events retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpotlightEvent'
    post:
      summary: Create a new spotlight event
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpotlightEvent'
      responses:
        '200':
          description: Spotlight event created successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /stats:
    get:
      summary: Get hackathon statistics
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stats'
        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
        '404':
          description: Route not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string

  /tokens:
    get:
      summary: Get all tokens
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Tokens retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Token'
    post:
      summary: Create a new token
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Token'
      responses:
        '200':
          description: Token created successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /userinfo:
    get:
      summary: Get user information
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
    get:
      summary: Get all users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/roles:
    get:
      summary: Get user roles
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Roles retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /waitlist:
    get:
      summary: Get waitlist information
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Waitlist retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  waitlistNumber:
                    type: number
                  status:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /waitlist/upperbound:
    get:
      summary: Get waitlist upper bound
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Upper bound retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  allowedCheckInUpperBound:
                    type: number
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 